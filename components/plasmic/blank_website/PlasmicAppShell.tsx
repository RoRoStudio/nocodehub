/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: txTmf45ApFSwCuTmFbFgzy
// Component: ubUjF5yCU587

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { NavigationBar } from "@plasmicpkgs/plasmic-nav";
import { AntdMenu } from "@plasmicpkgs/antd5/skinny/registerMenu";
import { AntdMenuItemGroup } from "@plasmicpkgs/antd5/skinny/registerMenu";
import { AntdMenuItem } from "@plasmicpkgs/antd5/skinny/registerMenu";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: txTmf45ApFSwCuTmFbFgzy/projectcss
import sty from "./PlasmicAppShell.module.css"; // plasmic-import: ubUjF5yCU587/css

import DotIcon from "./icons/PlasmicIcon__Dot"; // plasmic-import: CiAdGrSUOTa6/icon
import Wallet02Icon from "./icons/PlasmicIcon__Wallet02"; // plasmic-import: fliTV4T4brxf/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: NMPhim3e7qm5/icon

createPlasmicElementProxy;

export type PlasmicAppShell__VariantMembers = {};
export type PlasmicAppShell__VariantsArgs = {};
type VariantPropType = keyof PlasmicAppShell__VariantsArgs;
export const PlasmicAppShell__VariantProps = new Array<VariantPropType>();

export type PlasmicAppShell__ArgsType = {};
type ArgPropType = keyof PlasmicAppShell__ArgsType;
export const PlasmicAppShell__ArgProps = new Array<ArgPropType>();

export type PlasmicAppShell__OverridesType = {
  root?: Flex__<"div">;
  navigationBar?: Flex__<typeof NavigationBar>;
  freeBox?: Flex__<"div">;
  sidebar?: Flex__<"section">;
  menu?: Flex__<typeof AntdMenu>;
  itemGroup?: Flex__<typeof AntdMenuItemGroup>;
  general?: Flex__<"div">;
  menuItem?: Flex__<typeof AntdMenuItem>;
  content?: Flex__<"div">;
  textAndIcon?: Flex__<"div">;
  text?: Flex__<"div">;
  badge?: Flex__<"div">;
  text2?: Flex__<"div">;
  pageContent?: Flex__<"section">;
};

export interface DefaultAppShellProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAppShell__RenderFunc(props: {
  variants: PlasmicAppShell__VariantsArgs;
  args: PlasmicAppShell__ArgsType;
  overrides: PlasmicAppShell__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <NavigationBar
        data-plasmic-name={"navigationBar"}
        data-plasmic-override={overrides.navigationBar}
        brand={
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__lHskH
            )}
            component={Link}
            href={"#"}
            platform={"nextjs"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__bteSa
              )}
            >
              {"No-Code Hub"}
            </div>
          </PlasmicLink__>
        }
        className={classNames("__wab_instance", sty.navigationBar)}
        closeButton={
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__rj8Bn)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"none"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            src={"https://static1.plasmic.app/close.svg"}
          />
        }
        itemsGap={8}
        menuItems={
          <React.Fragment>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__j2Cq4
              )}
              component={Link}
              href={"/"}
              platform={"nextjs"}
            >
              {"Home"}
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__r5Vc6
              )}
              component={Link}
              href={"/"}
              platform={"nextjs"}
            >
              {"About"}
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__iCJan
              )}
              component={Link}
              href={"/"}
              platform={"nextjs"}
            >
              {"Contact"}
            </PlasmicLink__>
          </React.Fragment>
        }
        openButton={
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img___079Q)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"none"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            src={"https://static1.plasmic.app/menu.svg"}
          />
        }
        responsiveBreakpoint={768}
      />

      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <section
          data-plasmic-name={"sidebar"}
          data-plasmic-override={overrides.sidebar}
          className={classNames(projectcss.all, sty.sidebar)}
        >
          <AntdMenu
            data-plasmic-name={"menu"}
            data-plasmic-override={overrides.menu}
            className={classNames("__wab_instance", sty.menu)}
          >
            <AntdMenuItemGroup
              data-plasmic-name={"itemGroup"}
              data-plasmic-override={overrides.itemGroup}
              className={classNames("__wab_instance", sty.itemGroup)}
              title={
                <div
                  data-plasmic-name={"general"}
                  data-plasmic-override={overrides.general}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.general
                  )}
                >
                  {"GENERAL"}
                </div>
              }
            >
              <AntdMenuItem
                data-plasmic-name={"menuItem"}
                data-plasmic-override={overrides.menuItem}
                className={classNames("__wab_instance", sty.menuItem)}
                key={"menuItemKey"}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"content"}
                  data-plasmic-override={overrides.content}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.content)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"textAndIcon"}
                    data-plasmic-override={overrides.textAndIcon}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.textAndIcon)}
                  >
                    <DotIcon
                      className={classNames(projectcss.all, sty.svg__jJ6Ni)}
                      role={"img"}
                    />

                    <Wallet02Icon
                      className={classNames(projectcss.all, sty.svg___6EV7U)}
                      role={"img"}
                    />

                    <div
                      data-plasmic-name={"text"}
                      data-plasmic-override={overrides.text}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text
                      )}
                    >
                      {"Wallet"}
                    </div>
                  </Stack__>
                  <div
                    data-plasmic-name={"badge"}
                    data-plasmic-override={overrides.badge}
                    className={classNames(projectcss.all, sty.badge)}
                  >
                    <div
                      data-plasmic-name={"text2"}
                      data-plasmic-override={overrides.text2}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text2
                      )}
                    >
                      {"10"}
                    </div>
                  </div>
                  <ChevronDownIcon
                    className={classNames(projectcss.all, sty.svg__vwLhy)}
                    role={"img"}
                  />
                </Stack__>
              </AntdMenuItem>
            </AntdMenuItemGroup>
          </AntdMenu>
        </section>
        <section
          data-plasmic-name={"pageContent"}
          data-plasmic-override={overrides.pageContent}
          className={classNames(projectcss.all, sty.pageContent)}
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navigationBar",
    "freeBox",
    "sidebar",
    "menu",
    "itemGroup",
    "general",
    "menuItem",
    "content",
    "textAndIcon",
    "text",
    "badge",
    "text2",
    "pageContent"
  ],
  navigationBar: ["navigationBar"],
  freeBox: [
    "freeBox",
    "sidebar",
    "menu",
    "itemGroup",
    "general",
    "menuItem",
    "content",
    "textAndIcon",
    "text",
    "badge",
    "text2",
    "pageContent"
  ],
  sidebar: [
    "sidebar",
    "menu",
    "itemGroup",
    "general",
    "menuItem",
    "content",
    "textAndIcon",
    "text",
    "badge",
    "text2"
  ],
  menu: [
    "menu",
    "itemGroup",
    "general",
    "menuItem",
    "content",
    "textAndIcon",
    "text",
    "badge",
    "text2"
  ],
  itemGroup: [
    "itemGroup",
    "general",
    "menuItem",
    "content",
    "textAndIcon",
    "text",
    "badge",
    "text2"
  ],
  general: ["general"],
  menuItem: ["menuItem", "content", "textAndIcon", "text", "badge", "text2"],
  content: ["content", "textAndIcon", "text", "badge", "text2"],
  textAndIcon: ["textAndIcon", "text"],
  text: ["text"],
  badge: ["badge", "text2"],
  text2: ["text2"],
  pageContent: ["pageContent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navigationBar: typeof NavigationBar;
  freeBox: "div";
  sidebar: "section";
  menu: typeof AntdMenu;
  itemGroup: typeof AntdMenuItemGroup;
  general: "div";
  menuItem: typeof AntdMenuItem;
  content: "div";
  textAndIcon: "div";
  text: "div";
  badge: "div";
  text2: "div";
  pageContent: "section";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAppShell__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAppShell__VariantsArgs;
    args?: PlasmicAppShell__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAppShell__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAppShell__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAppShell__ArgProps,
          internalVariantPropNames: PlasmicAppShell__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAppShell__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAppShell";
  } else {
    func.displayName = `PlasmicAppShell.${nodeName}`;
  }
  return func;
}

export const PlasmicAppShell = Object.assign(
  // Top-level PlasmicAppShell renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navigationBar: makeNodeComponent("navigationBar"),
    freeBox: makeNodeComponent("freeBox"),
    sidebar: makeNodeComponent("sidebar"),
    menu: makeNodeComponent("menu"),
    itemGroup: makeNodeComponent("itemGroup"),
    general: makeNodeComponent("general"),
    menuItem: makeNodeComponent("menuItem"),
    content: makeNodeComponent("content"),
    textAndIcon: makeNodeComponent("textAndIcon"),
    text: makeNodeComponent("text"),
    badge: makeNodeComponent("badge"),
    text2: makeNodeComponent("text2"),
    pageContent: makeNodeComponent("pageContent"),

    // Metadata about props expected for PlasmicAppShell
    internalVariantProps: PlasmicAppShell__VariantProps,
    internalArgProps: PlasmicAppShell__ArgProps
  }
);

export default PlasmicAppShell;
/* prettier-ignore-end */
